from SAT import *
import numpy as np
import turtle
from PIL import Image, EpsImagePlugin
gama = [[0, 36, 3, 41, 18],
        [1, 44, 10, 45, 2],
        [62, 6, 43, 15, 61],
        [28, 55, 25, 21, 56],
        [27, 20, 39, 8, 14]
        ]

def L_forward(x):
    L=[[[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 0, 9], [0, 0, 10], [0, 0, 11], [0, 0, 12], [0, 0, 13], [0, 0, 14], [0, 0, 15], [0, 0, 16], [0, 0, 17], [0, 0, 18], [0, 0, 19], [0, 0, 20], [0, 0, 21], [0, 0, 22], [0, 0, 23], [0, 0, 24], [0, 0, 25], [0, 0, 26], [0, 0, 27], [0, 0, 28], [0, 0, 29], [0, 0, 30], [0, 0, 31], [0, 0, 32], [0, 0, 33], [0, 0, 34], [0, 0, 35], [0, 0, 36], [0, 0, 37], [0, 0, 38], [0, 0, 39], [0, 0, 40], [0, 0, 41], [0, 0, 42], [0, 0, 43], [0, 0, 44], [0, 0, 45], [0, 0, 46], [0, 0, 47], [0, 0, 48], [0, 0, 49], [0, 0, 50], [0, 0, 51], [0, 0, 52], [0, 0, 53], [0, 0, 54], [0, 0, 55], [0, 0, 56], [0, 0, 57], [0, 0, 58], [0, 0, 59], [0, 0, 60], [0, 0, 61], [0, 0, 62], [0, 0, 63]], [[1, 3, 36], [1, 3, 37], [1, 3, 38], [1, 3, 39], [1, 3, 40], [1, 3, 41], [1, 3, 42], [1, 3, 43], [1, 3, 44], [1, 3, 45], [1, 3, 46], [1, 3, 47], [1, 3, 48], [1, 3, 49], [1, 3, 50], [1, 3, 51], [1, 3, 52], [1, 3, 53], [1, 3, 54], [1, 3, 55], [1, 3, 56], [1, 3, 57], [1, 3, 58], [1, 3, 59], [1, 3, 60], [1, 3, 61], [1, 3, 62], [1, 3, 63], [1, 3, 0], [1, 3, 1], [1, 3, 2], [1, 3, 3], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 3, 9], [1, 3, 10], [1, 3, 11], [1, 3, 12], [1, 3, 13], [1, 3, 14], [1, 3, 15], [1, 3, 16], [1, 3, 17], [1, 3, 18], [1, 3, 19], [1, 3, 20], [1, 3, 21], [1, 3, 22], [1, 3, 23], [1, 3, 24], [1, 3, 25], [1, 3, 26], [1, 3, 27], [1, 3, 28], [1, 3, 29], [1, 3, 30], [1, 3, 31], [1, 3, 32], [1, 3, 33], [1, 3, 34], [1, 3, 35]], [[2, 1, 3], [2, 1, 4], [2, 1, 5], [2, 1, 6], [2, 1, 7], [2, 1, 8], [2, 1, 9], [2, 1, 10], [2, 1, 11], [2, 1, 12], [2, 1, 13], [2, 1, 14], [2, 1, 15], [2, 1, 16], [2, 1, 17], [2, 1, 18], [2, 1, 19], [2, 1, 20], [2, 1, 21], [2, 1, 22], [2, 1, 23], [2, 1, 24], [2, 1, 25], [2, 1, 26], [2, 1, 27], [2, 1, 28], [2, 1, 29], [2, 1, 30], [2, 1, 31], [2, 1, 32], [2, 1, 33], [2, 1, 34], [2, 1, 35], [2, 1, 36], [2, 1, 37], [2, 1, 38], [2, 1, 39], [2, 1, 40], [2, 1, 41], [2, 1, 42], [2, 1, 43], [2, 1, 44], [2, 1, 45], [2, 1, 46], [2, 1, 47], [2, 1, 48], [2, 1, 49], [2, 1, 50], [2, 1, 51], [2, 1, 52], [2, 1, 53], [2, 1, 54], [2, 1, 55], [2, 1, 56], [2, 1, 57], [2, 1, 58], [2, 1, 59], [2, 1, 60], [2, 1, 61], [2, 1, 62], [2, 1, 63], [2, 1, 0], [2, 1, 1], [2, 1, 2]], [[3, 4, 41], [3, 4, 42], [3, 4, 43], [3, 4, 44], [3, 4, 45], [3, 4, 46], [3, 4, 47], [3, 4, 48], [3, 4, 49], [3, 4, 50], [3, 4, 51], [3, 4, 52], [3, 4, 53], [3, 4, 54], [3, 4, 55], [3, 4, 56], [3, 4, 57], [3, 4, 58], [3, 4, 59], [3, 4, 60], [3, 4, 61], [3, 4, 62], [3, 4, 63], [3, 4, 0], [3, 4, 1], [3, 4, 2], [3, 4, 3], [3, 4, 4], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 4, 9], [3, 4, 10], [3, 4, 11], [3, 4, 12], [3, 4, 13], [3, 4, 14], [3, 4, 15], [3, 4, 16], [3, 4, 17], [3, 4, 18], [3, 4, 19], [3, 4, 20], [3, 4, 21], [3, 4, 22], [3, 4, 23], [3, 4, 24], [3, 4, 25], [3, 4, 26], [3, 4, 27], [3, 4, 28], [3, 4, 29], [3, 4, 30], [3, 4, 31], [3, 4, 32], [3, 4, 33], [3, 4, 34], [3, 4, 35], [3, 4, 36], [3, 4, 37], [3, 4, 38], [3, 4, 39], [3, 4, 40]], [[4, 2, 18], [4, 2, 19], [4, 2, 20], [4, 2, 21], [4, 2, 22], [4, 2, 23], [4, 2, 24], [4, 2, 25], [4, 2, 26], [4, 2, 27], [4, 2, 28], [4, 2, 29], [4, 2, 30], [4, 2, 31], [4, 2, 32], [4, 2, 33], [4, 2, 34], [4, 2, 35], [4, 2, 36], [4, 2, 37], [4, 2, 38], [4, 2, 39], [4, 2, 40], [4, 2, 41], [4, 2, 42], [4, 2, 43], [4, 2, 44], [4, 2, 45], [4, 2, 46], [4, 2, 47], [4, 2, 48], [4, 2, 49], [4, 2, 50], [4, 2, 51], [4, 2, 52], [4, 2, 53], [4, 2, 54], [4, 2, 55], [4, 2, 56], [4, 2, 57], [4, 2, 58], [4, 2, 59], [4, 2, 60], [4, 2, 61], [4, 2, 62], [4, 2, 63], [4, 2, 0], [4, 2, 1], [4, 2, 2], [4, 2, 3], [4, 2, 4], [4, 2, 5], [4, 2, 6], [4, 2, 7], [4, 2, 8], [4, 2, 9], [4, 2, 10], [4, 2, 11], [4, 2, 12], [4, 2, 13], [4, 2, 14], [4, 2, 15], [4, 2, 16], [4, 2, 17]]], [[[0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 2, 9], [0, 2, 10], [0, 2, 11], [0, 2, 12], [0, 2, 13], [0, 2, 14], [0, 2, 15], [0, 2, 16], [0, 2, 17], [0, 2, 18], [0, 2, 19], [0, 2, 20], [0, 2, 21], [0, 2, 22], [0, 2, 23], [0, 2, 24], [0, 2, 25], [0, 2, 26], [0, 2, 27], [0, 2, 28], [0, 2, 29], [0, 2, 30], [0, 2, 31], [0, 2, 32], [0, 2, 33], [0, 2, 34], [0, 2, 35], [0, 2, 36], [0, 2, 37], [0, 2, 38], [0, 2, 39], [0, 2, 40], [0, 2, 41], [0, 2, 42], [0, 2, 43], [0, 2, 44], [0, 2, 45], [0, 2, 46], [0, 2, 47], [0, 2, 48], [0, 2, 49], [0, 2, 50], [0, 2, 51], [0, 2, 52], [0, 2, 53], [0, 2, 54], [0, 2, 55], [0, 2, 56], [0, 2, 57], [0, 2, 58], [0, 2, 59], [0, 2, 60], [0, 2, 61], [0, 2, 62], [0, 2, 63], [0, 2, 0]], [[1, 0, 44], [1, 0, 45], [1, 0, 46], [1, 0, 47], [1, 0, 48], [1, 0, 49], [1, 0, 50], [1, 0, 51], [1, 0, 52], [1, 0, 53], [1, 0, 54], [1, 0, 55], [1, 0, 56], [1, 0, 57], [1, 0, 58], [1, 0, 59], [1, 0, 60], [1, 0, 61], [1, 0, 62], [1, 0, 63], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 0, 5], [1, 0, 6], [1, 0, 7], [1, 0, 8], [1, 0, 9], [1, 0, 10], [1, 0, 11], [1, 0, 12], [1, 0, 13], [1, 0, 14], [1, 0, 15], [1, 0, 16], [1, 0, 17], [1, 0, 18], [1, 0, 19], [1, 0, 20], [1, 0, 21], [1, 0, 22], [1, 0, 23], [1, 0, 24], [1, 0, 25], [1, 0, 26], [1, 0, 27], [1, 0, 28], [1, 0, 29], [1, 0, 30], [1, 0, 31], [1, 0, 32], [1, 0, 33], [1, 0, 34], [1, 0, 35], [1, 0, 36], [1, 0, 37], [1, 0, 38], [1, 0, 39], [1, 0, 40], [1, 0, 41], [1, 0, 42], [1, 0, 43]], [[2, 3, 10], [2, 3, 11], [2, 3, 12], [2, 3, 13], [2, 3, 14], [2, 3, 15], [2, 3, 16], [2, 3, 17], [2, 3, 18], [2, 3, 19], [2, 3, 20], [2, 3, 21], [2, 3, 22], [2, 3, 23], [2, 3, 24], [2, 3, 25], [2, 3, 26], [2, 3, 27], [2, 3, 28], [2, 3, 29], [2, 3, 30], [2, 3, 31], [2, 3, 32], [2, 3, 33], [2, 3, 34], [2, 3, 35], [2, 3, 36], [2, 3, 37], [2, 3, 38], [2, 3, 39], [2, 3, 40], [2, 3, 41], [2, 3, 42], [2, 3, 43], [2, 3, 44], [2, 3, 45], [2, 3, 46], [2, 3, 47], [2, 3, 48], [2, 3, 49], [2, 3, 50], [2, 3, 51], [2, 3, 52], [2, 3, 53], [2, 3, 54], [2, 3, 55], [2, 3, 56], [2, 3, 57], [2, 3, 58], [2, 3, 59], [2, 3, 60], [2, 3, 61], [2, 3, 62], [2, 3, 63], [2, 3, 0], [2, 3, 1], [2, 3, 2], [2, 3, 3], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 3, 9]], [[3, 1, 45], [3, 1, 46], [3, 1, 47], [3, 1, 48], [3, 1, 49], [3, 1, 50], [3, 1, 51], [3, 1, 52], [3, 1, 53], [3, 1, 54], [3, 1, 55], [3, 1, 56], [3, 1, 57], [3, 1, 58], [3, 1, 59], [3, 1, 60], [3, 1, 61], [3, 1, 62], [3, 1, 63], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 1, 4], [3, 1, 5], [3, 1, 6], [3, 1, 7], [3, 1, 8], [3, 1, 9], [3, 1, 10], [3, 1, 11], [3, 1, 12], [3, 1, 13], [3, 1, 14], [3, 1, 15], [3, 1, 16], [3, 1, 17], [3, 1, 18], [3, 1, 19], [3, 1, 20], [3, 1, 21], [3, 1, 22], [3, 1, 23], [3, 1, 24], [3, 1, 25], [3, 1, 26], [3, 1, 27], [3, 1, 28], [3, 1, 29], [3, 1, 30], [3, 1, 31], [3, 1, 32], [3, 1, 33], [3, 1, 34], [3, 1, 35], [3, 1, 36], [3, 1, 37], [3, 1, 38], [3, 1, 39], [3, 1, 40], [3, 1, 41], [3, 1, 42], [3, 1, 43], [3, 1, 44]], [[4, 4, 2], [4, 4, 3], [4, 4, 4], [4, 4, 5], [4, 4, 6], [4, 4, 7], [4, 4, 8], [4, 4, 9], [4, 4, 10], [4, 4, 11], [4, 4, 12], [4, 4, 13], [4, 4, 14], [4, 4, 15], [4, 4, 16], [4, 4, 17], [4, 4, 18], [4, 4, 19], [4, 4, 20], [4, 4, 21], [4, 4, 22], [4, 4, 23], [4, 4, 24], [4, 4, 25], [4, 4, 26], [4, 4, 27], [4, 4, 28], [4, 4, 29], [4, 4, 30], [4, 4, 31], [4, 4, 32], [4, 4, 33], [4, 4, 34], [4, 4, 35], [4, 4, 36], [4, 4, 37], [4, 4, 38], [4, 4, 39], [4, 4, 40], [4, 4, 41], [4, 4, 42], [4, 4, 43], [4, 4, 44], [4, 4, 45], [4, 4, 46], [4, 4, 47], [4, 4, 48], [4, 4, 49], [4, 4, 50], [4, 4, 51], [4, 4, 52], [4, 4, 53], [4, 4, 54], [4, 4, 55], [4, 4, 56], [4, 4, 57], [4, 4, 58], [4, 4, 59], [4, 4, 60], [4, 4, 61], [4, 4, 62], [4, 4, 63], [4, 4, 0], [4, 4, 1]]], [[[0, 4, 62], [0, 4, 63], [0, 4, 0], [0, 4, 1], [0, 4, 2], [0, 4, 3], [0, 4, 4], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 4, 8], [0, 4, 9], [0, 4, 10], [0, 4, 11], [0, 4, 12], [0, 4, 13], [0, 4, 14], [0, 4, 15], [0, 4, 16], [0, 4, 17], [0, 4, 18], [0, 4, 19], [0, 4, 20], [0, 4, 21], [0, 4, 22], [0, 4, 23], [0, 4, 24], [0, 4, 25], [0, 4, 26], [0, 4, 27], [0, 4, 28], [0, 4, 29], [0, 4, 30], [0, 4, 31], [0, 4, 32], [0, 4, 33], [0, 4, 34], [0, 4, 35], [0, 4, 36], [0, 4, 37], [0, 4, 38], [0, 4, 39], [0, 4, 40], [0, 4, 41], [0, 4, 42], [0, 4, 43], [0, 4, 44], [0, 4, 45], [0, 4, 46], [0, 4, 47], [0, 4, 48], [0, 4, 49], [0, 4, 50], [0, 4, 51], [0, 4, 52], [0, 4, 53], [0, 4, 54], [0, 4, 55], [0, 4, 56], [0, 4, 57], [0, 4, 58], [0, 4, 59], [0, 4, 60], [0, 4, 61]], [[1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 2, 9], [1, 2, 10], [1, 2, 11], [1, 2, 12], [1, 2, 13], [1, 2, 14], [1, 2, 15], [1, 2, 16], [1, 2, 17], [1, 2, 18], [1, 2, 19], [1, 2, 20], [1, 2, 21], [1, 2, 22], [1, 2, 23], [1, 2, 24], [1, 2, 25], [1, 2, 26], [1, 2, 27], [1, 2, 28], [1, 2, 29], [1, 2, 30], [1, 2, 31], [1, 2, 32], [1, 2, 33], [1, 2, 34], [1, 2, 35], [1, 2, 36], [1, 2, 37], [1, 2, 38], [1, 2, 39], [1, 2, 40], [1, 2, 41], [1, 2, 42], [1, 2, 43], [1, 2, 44], [1, 2, 45], [1, 2, 46], [1, 2, 47], [1, 2, 48], [1, 2, 49], [1, 2, 50], [1, 2, 51], [1, 2, 52], [1, 2, 53], [1, 2, 54], [1, 2, 55], [1, 2, 56], [1, 2, 57], [1, 2, 58], [1, 2, 59], [1, 2, 60], [1, 2, 61], [1, 2, 62], [1, 2, 63], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5]], [[2, 0, 43], [2, 0, 44], [2, 0, 45], [2, 0, 46], [2, 0, 47], [2, 0, 48], [2, 0, 49], [2, 0, 50], [2, 0, 51], [2, 0, 52], [2, 0, 53], [2, 0, 54], [2, 0, 55], [2, 0, 56], [2, 0, 57], [2, 0, 58], [2, 0, 59], [2, 0, 60], [2, 0, 61], [2, 0, 62], [2, 0, 63], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 0, 5], [2, 0, 6], [2, 0, 7], [2, 0, 8], [2, 0, 9], [2, 0, 10], [2, 0, 11], [2, 0, 12], [2, 0, 13], [2, 0, 14], [2, 0, 15], [2, 0, 16], [2, 0, 17], [2, 0, 18], [2, 0, 19], [2, 0, 20], [2, 0, 21], [2, 0, 22], [2, 0, 23], [2, 0, 24], [2, 0, 25], [2, 0, 26], [2, 0, 27], [2, 0, 28], [2, 0, 29], [2, 0, 30], [2, 0, 31], [2, 0, 32], [2, 0, 33], [2, 0, 34], [2, 0, 35], [2, 0, 36], [2, 0, 37], [2, 0, 38], [2, 0, 39], [2, 0, 40], [2, 0, 41], [2, 0, 42]], [[3, 3, 15], [3, 3, 16], [3, 3, 17], [3, 3, 18], [3, 3, 19], [3, 3, 20], [3, 3, 21], [3, 3, 22], [3, 3, 23], [3, 3, 24], [3, 3, 25], [3, 3, 26], [3, 3, 27], [3, 3, 28], [3, 3, 29], [3, 3, 30], [3, 3, 31], [3, 3, 32], [3, 3, 33], [3, 3, 34], [3, 3, 35], [3, 3, 36], [3, 3, 37], [3, 3, 38], [3, 3, 39], [3, 3, 40], [3, 3, 41], [3, 3, 42], [3, 3, 43], [3, 3, 44], [3, 3, 45], [3, 3, 46], [3, 3, 47], [3, 3, 48], [3, 3, 49], [3, 3, 50], [3, 3, 51], [3, 3, 52], [3, 3, 53], [3, 3, 54], [3, 3, 55], [3, 3, 56], [3, 3, 57], [3, 3, 58], [3, 3, 59], [3, 3, 60], [3, 3, 61], [3, 3, 62], [3, 3, 63], [3, 3, 0], [3, 3, 1], [3, 3, 2], [3, 3, 3], [3, 3, 4], [3, 3, 5], [3, 3, 6], [3, 3, 7], [3, 3, 8], [3, 3, 9], [3, 3, 10], [3, 3, 11], [3, 3, 12], [3, 3, 13], [3, 3, 14]], [[4, 1, 61], [4, 1, 62], [4, 1, 63], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 1, 5], [4, 1, 6], [4, 1, 7], [4, 1, 8], [4, 1, 9], [4, 1, 10], [4, 1, 11], [4, 1, 12], [4, 1, 13], [4, 1, 14], [4, 1, 15], [4, 1, 16], [4, 1, 17], [4, 1, 18], [4, 1, 19], [4, 1, 20], [4, 1, 21], [4, 1, 22], [4, 1, 23], [4, 1, 24], [4, 1, 25], [4, 1, 26], [4, 1, 27], [4, 1, 28], [4, 1, 29], [4, 1, 30], [4, 1, 31], [4, 1, 32], [4, 1, 33], [4, 1, 34], [4, 1, 35], [4, 1, 36], [4, 1, 37], [4, 1, 38], [4, 1, 39], [4, 1, 40], [4, 1, 41], [4, 1, 42], [4, 1, 43], [4, 1, 44], [4, 1, 45], [4, 1, 46], [4, 1, 47], [4, 1, 48], [4, 1, 49], [4, 1, 50], [4, 1, 51], [4, 1, 52], [4, 1, 53], [4, 1, 54], [4, 1, 55], [4, 1, 56], [4, 1, 57], [4, 1, 58], [4, 1, 59], [4, 1, 60]]], [[[0, 1, 28], [0, 1, 29], [0, 1, 30], [0, 1, 31], [0, 1, 32], [0, 1, 33], [0, 1, 34], [0, 1, 35], [0, 1, 36], [0, 1, 37], [0, 1, 38], [0, 1, 39], [0, 1, 40], [0, 1, 41], [0, 1, 42], [0, 1, 43], [0, 1, 44], [0, 1, 45], [0, 1, 46], [0, 1, 47], [0, 1, 48], [0, 1, 49], [0, 1, 50], [0, 1, 51], [0, 1, 52], [0, 1, 53], [0, 1, 54], [0, 1, 55], [0, 1, 56], [0, 1, 57], [0, 1, 58], [0, 1, 59], [0, 1, 60], [0, 1, 61], [0, 1, 62], [0, 1, 63], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 1, 9], [0, 1, 10], [0, 1, 11], [0, 1, 12], [0, 1, 13], [0, 1, 14], [0, 1, 15], [0, 1, 16], [0, 1, 17], [0, 1, 18], [0, 1, 19], [0, 1, 20], [0, 1, 21], [0, 1, 22], [0, 1, 23], [0, 1, 24], [0, 1, 25], [0, 1, 26], [0, 1, 27]], [[1, 4, 55], [1, 4, 56], [1, 4, 57], [1, 4, 58], [1, 4, 59], [1, 4, 60], [1, 4, 61], [1, 4, 62], [1, 4, 63], [1, 4, 0], [1, 4, 1], [1, 4, 2], [1, 4, 3], [1, 4, 4], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 4, 10], [1, 4, 11], [1, 4, 12], [1, 4, 13], [1, 4, 14], [1, 4, 15], [1, 4, 16], [1, 4, 17], [1, 4, 18], [1, 4, 19], [1, 4, 20], [1, 4, 21], [1, 4, 22], [1, 4, 23], [1, 4, 24], [1, 4, 25], [1, 4, 26], [1, 4, 27], [1, 4, 28], [1, 4, 29], [1, 4, 30], [1, 4, 31], [1, 4, 32], [1, 4, 33], [1, 4, 34], [1, 4, 35], [1, 4, 36], [1, 4, 37], [1, 4, 38], [1, 4, 39], [1, 4, 40], [1, 4, 41], [1, 4, 42], [1, 4, 43], [1, 4, 44], [1, 4, 45], [1, 4, 46], [1, 4, 47], [1, 4, 48], [1, 4, 49], [1, 4, 50], [1, 4, 51], [1, 4, 52], [1, 4, 53], [1, 4, 54]], [[2, 2, 25], [2, 2, 26], [2, 2, 27], [2, 2, 28], [2, 2, 29], [2, 2, 30], [2, 2, 31], [2, 2, 32], [2, 2, 33], [2, 2, 34], [2, 2, 35], [2, 2, 36], [2, 2, 37], [2, 2, 38], [2, 2, 39], [2, 2, 40], [2, 2, 41], [2, 2, 42], [2, 2, 43], [2, 2, 44], [2, 2, 45], [2, 2, 46], [2, 2, 47], [2, 2, 48], [2, 2, 49], [2, 2, 50], [2, 2, 51], [2, 2, 52], [2, 2, 53], [2, 2, 54], [2, 2, 55], [2, 2, 56], [2, 2, 57], [2, 2, 58], [2, 2, 59], [2, 2, 60], [2, 2, 61], [2, 2, 62], [2, 2, 63], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 2, 5], [2, 2, 6], [2, 2, 7], [2, 2, 8], [2, 2, 9], [2, 2, 10], [2, 2, 11], [2, 2, 12], [2, 2, 13], [2, 2, 14], [2, 2, 15], [2, 2, 16], [2, 2, 17], [2, 2, 18], [2, 2, 19], [2, 2, 20], [2, 2, 21], [2, 2, 22], [2, 2, 23], [2, 2, 24]], [[3, 0, 21], [3, 0, 22], [3, 0, 23], [3, 0, 24], [3, 0, 25], [3, 0, 26], [3, 0, 27], [3, 0, 28], [3, 0, 29], [3, 0, 30], [3, 0, 31], [3, 0, 32], [3, 0, 33], [3, 0, 34], [3, 0, 35], [3, 0, 36], [3, 0, 37], [3, 0, 38], [3, 0, 39], [3, 0, 40], [3, 0, 41], [3, 0, 42], [3, 0, 43], [3, 0, 44], [3, 0, 45], [3, 0, 46], [3, 0, 47], [3, 0, 48], [3, 0, 49], [3, 0, 50], [3, 0, 51], [3, 0, 52], [3, 0, 53], [3, 0, 54], [3, 0, 55], [3, 0, 56], [3, 0, 57], [3, 0, 58], [3, 0, 59], [3, 0, 60], [3, 0, 61], [3, 0, 62], [3, 0, 63], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 0, 4], [3, 0, 5], [3, 0, 6], [3, 0, 7], [3, 0, 8], [3, 0, 9], [3, 0, 10], [3, 0, 11], [3, 0, 12], [3, 0, 13], [3, 0, 14], [3, 0, 15], [3, 0, 16], [3, 0, 17], [3, 0, 18], [3, 0, 19], [3, 0, 20]], [[4, 3, 56], [4, 3, 57], [4, 3, 58], [4, 3, 59], [4, 3, 60], [4, 3, 61], [4, 3, 62], [4, 3, 63], [4, 3, 0], [4, 3, 1], [4, 3, 2], [4, 3, 3], [4, 3, 4], [4, 3, 5], [4, 3, 6], [4, 3, 7], [4, 3, 8], [4, 3, 9], [4, 3, 10], [4, 3, 11], [4, 3, 12], [4, 3, 13], [4, 3, 14], [4, 3, 15], [4, 3, 16], [4, 3, 17], [4, 3, 18], [4, 3, 19], [4, 3, 20], [4, 3, 21], [4, 3, 22], [4, 3, 23], [4, 3, 24], [4, 3, 25], [4, 3, 26], [4, 3, 27], [4, 3, 28], [4, 3, 29], [4, 3, 30], [4, 3, 31], [4, 3, 32], [4, 3, 33], [4, 3, 34], [4, 3, 35], [4, 3, 36], [4, 3, 37], [4, 3, 38], [4, 3, 39], [4, 3, 40], [4, 3, 41], [4, 3, 42], [4, 3, 43], [4, 3, 44], [4, 3, 45], [4, 3, 46], [4, 3, 47], [4, 3, 48], [4, 3, 49], [4, 3, 50], [4, 3, 51], [4, 3, 52], [4, 3, 53], [4, 3, 54], [4, 3, 55]]], [[[0, 3, 27], [0, 3, 28], [0, 3, 29], [0, 3, 30], [0, 3, 31], [0, 3, 32], [0, 3, 33], [0, 3, 34], [0, 3, 35], [0, 3, 36], [0, 3, 37], [0, 3, 38], [0, 3, 39], [0, 3, 40], [0, 3, 41], [0, 3, 42], [0, 3, 43], [0, 3, 44], [0, 3, 45], [0, 3, 46], [0, 3, 47], [0, 3, 48], [0, 3, 49], [0, 3, 50], [0, 3, 51], [0, 3, 52], [0, 3, 53], [0, 3, 54], [0, 3, 55], [0, 3, 56], [0, 3, 57], [0, 3, 58], [0, 3, 59], [0, 3, 60], [0, 3, 61], [0, 3, 62], [0, 3, 63], [0, 3, 0], [0, 3, 1], [0, 3, 2], [0, 3, 3], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 3, 9], [0, 3, 10], [0, 3, 11], [0, 3, 12], [0, 3, 13], [0, 3, 14], [0, 3, 15], [0, 3, 16], [0, 3, 17], [0, 3, 18], [0, 3, 19], [0, 3, 20], [0, 3, 21], [0, 3, 22], [0, 3, 23], [0, 3, 24], [0, 3, 25], [0, 3, 26]], [[1, 1, 20], [1, 1, 21], [1, 1, 22], [1, 1, 23], [1, 1, 24], [1, 1, 25], [1, 1, 26], [1, 1, 27], [1, 1, 28], [1, 1, 29], [1, 1, 30], [1, 1, 31], [1, 1, 32], [1, 1, 33], [1, 1, 34], [1, 1, 35], [1, 1, 36], [1, 1, 37], [1, 1, 38], [1, 1, 39], [1, 1, 40], [1, 1, 41], [1, 1, 42], [1, 1, 43], [1, 1, 44], [1, 1, 45], [1, 1, 46], [1, 1, 47], [1, 1, 48], [1, 1, 49], [1, 1, 50], [1, 1, 51], [1, 1, 52], [1, 1, 53], [1, 1, 54], [1, 1, 55], [1, 1, 56], [1, 1, 57], [1, 1, 58], [1, 1, 59], [1, 1, 60], [1, 1, 61], [1, 1, 62], [1, 1, 63], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 1, 6], [1, 1, 7], [1, 1, 8], [1, 1, 9], [1, 1, 10], [1, 1, 11], [1, 1, 12], [1, 1, 13], [1, 1, 14], [1, 1, 15], [1, 1, 16], [1, 1, 17], [1, 1, 18], [1, 1, 19]], [[2, 4, 39], [2, 4, 40], [2, 4, 41], [2, 4, 42], [2, 4, 43], [2, 4, 44], [2, 4, 45], [2, 4, 46], [2, 4, 47], [2, 4, 48], [2, 4, 49], [2, 4, 50], [2, 4, 51], [2, 4, 52], [2, 4, 53], [2, 4, 54], [2, 4, 55], [2, 4, 56], [2, 4, 57], [2, 4, 58], [2, 4, 59], [2, 4, 60], [2, 4, 61], [2, 4, 62], [2, 4, 63], [2, 4, 0], [2, 4, 1], [2, 4, 2], [2, 4, 3], [2, 4, 4], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 4, 9], [2, 4, 10], [2, 4, 11], [2, 4, 12], [2, 4, 13], [2, 4, 14], [2, 4, 15], [2, 4, 16], [2, 4, 17], [2, 4, 18], [2, 4, 19], [2, 4, 20], [2, 4, 21], [2, 4, 22], [2, 4, 23], [2, 4, 24], [2, 4, 25], [2, 4, 26], [2, 4, 27], [2, 4, 28], [2, 4, 29], [2, 4, 30], [2, 4, 31], [2, 4, 32], [2, 4, 33], [2, 4, 34], [2, 4, 35], [2, 4, 36], [2, 4, 37], [2, 4, 38]], [[3, 2, 8], [3, 2, 9], [3, 2, 10], [3, 2, 11], [3, 2, 12], [3, 2, 13], [3, 2, 14], [3, 2, 15], [3, 2, 16], [3, 2, 17], [3, 2, 18], [3, 2, 19], [3, 2, 20], [3, 2, 21], [3, 2, 22], [3, 2, 23], [3, 2, 24], [3, 2, 25], [3, 2, 26], [3, 2, 27], [3, 2, 28], [3, 2, 29], [3, 2, 30], [3, 2, 31], [3, 2, 32], [3, 2, 33], [3, 2, 34], [3, 2, 35], [3, 2, 36], [3, 2, 37], [3, 2, 38], [3, 2, 39], [3, 2, 40], [3, 2, 41], [3, 2, 42], [3, 2, 43], [3, 2, 44], [3, 2, 45], [3, 2, 46], [3, 2, 47], [3, 2, 48], [3, 2, 49], [3, 2, 50], [3, 2, 51], [3, 2, 52], [3, 2, 53], [3, 2, 54], [3, 2, 55], [3, 2, 56], [3, 2, 57], [3, 2, 58], [3, 2, 59], [3, 2, 60], [3, 2, 61], [3, 2, 62], [3, 2, 63], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 2, 4], [3, 2, 5], [3, 2, 6], [3, 2, 7]], [[4, 0, 14], [4, 0, 15], [4, 0, 16], [4, 0, 17], [4, 0, 18], [4, 0, 19], [4, 0, 20], [4, 0, 21], [4, 0, 22], [4, 0, 23], [4, 0, 24], [4, 0, 25], [4, 0, 26], [4, 0, 27], [4, 0, 28], [4, 0, 29], [4, 0, 30], [4, 0, 31], [4, 0, 32], [4, 0, 33], [4, 0, 34], [4, 0, 35], [4, 0, 36], [4, 0, 37], [4, 0, 38], [4, 0, 39], [4, 0, 40], [4, 0, 41], [4, 0, 42], [4, 0, 43], [4, 0, 44], [4, 0, 45], [4, 0, 46], [4, 0, 47], [4, 0, 48], [4, 0, 49], [4, 0, 50], [4, 0, 51], [4, 0, 52], [4, 0, 53], [4, 0, 54], [4, 0, 55], [4, 0, 56], [4, 0, 57], [4, 0, 58], [4, 0, 59], [4, 0, 60], [4, 0, 61], [4, 0, 62], [4, 0, 63], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 0, 3], [4, 0, 4], [4, 0, 5], [4, 0, 6], [4, 0, 7], [4, 0, 8], [4, 0, 9], [4, 0, 10], [4, 0, 11], [4, 0, 12], [4, 0, 13]]]]
    return L[x[0]][x[1]][x[2]]


def L_back(x):
    L=[[[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 0, 9], [0, 0, 10], [0, 0, 11], [0, 0, 12], [0, 0, 13], [0, 0, 14], [0, 0, 15], [0, 0, 16], [0, 0, 17], [0, 0, 18], [0, 0, 19], [0, 0, 20], [0, 0, 21], [0, 0, 22], [0, 0, 23], [0, 0, 24], [0, 0, 25], [0, 0, 26], [0, 0, 27], [0, 0, 28], [0, 0, 29], [0, 0, 30], [0, 0, 31], [0, 0, 32], [0, 0, 33], [0, 0, 34], [0, 0, 35], [0, 0, 36], [0, 0, 37], [0, 0, 38], [0, 0, 39], [0, 0, 40], [0, 0, 41], [0, 0, 42], [0, 0, 43], [0, 0, 44], [0, 0, 45], [0, 0, 46], [0, 0, 47], [0, 0, 48], [0, 0, 49], [0, 0, 50], [0, 0, 51], [0, 0, 52], [0, 0, 53], [0, 0, 54], [0, 0, 55], [0, 0, 56], [0, 0, 57], [0, 0, 58], [0, 0, 59], [0, 0, 60], [0, 0, 61], [0, 0, 62], [0, 0, 63]], [[3, 0, 36], [3, 0, 37], [3, 0, 38], [3, 0, 39], [3, 0, 40], [3, 0, 41], [3, 0, 42], [3, 0, 43], [3, 0, 44], [3, 0, 45], [3, 0, 46], [3, 0, 47], [3, 0, 48], [3, 0, 49], [3, 0, 50], [3, 0, 51], [3, 0, 52], [3, 0, 53], [3, 0, 54], [3, 0, 55], [3, 0, 56], [3, 0, 57], [3, 0, 58], [3, 0, 59], [3, 0, 60], [3, 0, 61], [3, 0, 62], [3, 0, 63], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 0, 3], [3, 0, 4], [3, 0, 5], [3, 0, 6], [3, 0, 7], [3, 0, 8], [3, 0, 9], [3, 0, 10], [3, 0, 11], [3, 0, 12], [3, 0, 13], [3, 0, 14], [3, 0, 15], [3, 0, 16], [3, 0, 17], [3, 0, 18], [3, 0, 19], [3, 0, 20], [3, 0, 21], [3, 0, 22], [3, 0, 23], [3, 0, 24], [3, 0, 25], [3, 0, 26], [3, 0, 27], [3, 0, 28], [3, 0, 29], [3, 0, 30], [3, 0, 31], [3, 0, 32], [3, 0, 33], [3, 0, 34], [3, 0, 35]], [[1, 0, 63], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 0, 3], [1, 0, 4], [1, 0, 5], [1, 0, 6], [1, 0, 7], [1, 0, 8], [1, 0, 9], [1, 0, 10], [1, 0, 11], [1, 0, 12], [1, 0, 13], [1, 0, 14], [1, 0, 15], [1, 0, 16], [1, 0, 17], [1, 0, 18], [1, 0, 19], [1, 0, 20], [1, 0, 21], [1, 0, 22], [1, 0, 23], [1, 0, 24], [1, 0, 25], [1, 0, 26], [1, 0, 27], [1, 0, 28], [1, 0, 29], [1, 0, 30], [1, 0, 31], [1, 0, 32], [1, 0, 33], [1, 0, 34], [1, 0, 35], [1, 0, 36], [1, 0, 37], [1, 0, 38], [1, 0, 39], [1, 0, 40], [1, 0, 41], [1, 0, 42], [1, 0, 43], [1, 0, 44], [1, 0, 45], [1, 0, 46], [1, 0, 47], [1, 0, 48], [1, 0, 49], [1, 0, 50], [1, 0, 51], [1, 0, 52], [1, 0, 53], [1, 0, 54], [1, 0, 55], [1, 0, 56], [1, 0, 57], [1, 0, 58], [1, 0, 59], [1, 0, 60], [1, 0, 61], [1, 0, 62]], [[4, 0, 37], [4, 0, 38], [4, 0, 39], [4, 0, 40], [4, 0, 41], [4, 0, 42], [4, 0, 43], [4, 0, 44], [4, 0, 45], [4, 0, 46], [4, 0, 47], [4, 0, 48], [4, 0, 49], [4, 0, 50], [4, 0, 51], [4, 0, 52], [4, 0, 53], [4, 0, 54], [4, 0, 55], [4, 0, 56], [4, 0, 57], [4, 0, 58], [4, 0, 59], [4, 0, 60], [4, 0, 61], [4, 0, 62], [4, 0, 63], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 0, 3], [4, 0, 4], [4, 0, 5], [4, 0, 6], [4, 0, 7], [4, 0, 8], [4, 0, 9], [4, 0, 10], [4, 0, 11], [4, 0, 12], [4, 0, 13], [4, 0, 14], [4, 0, 15], [4, 0, 16], [4, 0, 17], [4, 0, 18], [4, 0, 19], [4, 0, 20], [4, 0, 21], [4, 0, 22], [4, 0, 23], [4, 0, 24], [4, 0, 25], [4, 0, 26], [4, 0, 27], [4, 0, 28], [4, 0, 29], [4, 0, 30], [4, 0, 31], [4, 0, 32], [4, 0, 33], [4, 0, 34], [4, 0, 35], [4, 0, 36]], [[2, 0, 2], [2, 0, 3], [2, 0, 4], [2, 0, 5], [2, 0, 6], [2, 0, 7], [2, 0, 8], [2, 0, 9], [2, 0, 10], [2, 0, 11], [2, 0, 12], [2, 0, 13], [2, 0, 14], [2, 0, 15], [2, 0, 16], [2, 0, 17], [2, 0, 18], [2, 0, 19], [2, 0, 20], [2, 0, 21], [2, 0, 22], [2, 0, 23], [2, 0, 24], [2, 0, 25], [2, 0, 26], [2, 0, 27], [2, 0, 28], [2, 0, 29], [2, 0, 30], [2, 0, 31], [2, 0, 32], [2, 0, 33], [2, 0, 34], [2, 0, 35], [2, 0, 36], [2, 0, 37], [2, 0, 38], [2, 0, 39], [2, 0, 40], [2, 0, 41], [2, 0, 42], [2, 0, 43], [2, 0, 44], [2, 0, 45], [2, 0, 46], [2, 0, 47], [2, 0, 48], [2, 0, 49], [2, 0, 50], [2, 0, 51], [2, 0, 52], [2, 0, 53], [2, 0, 54], [2, 0, 55], [2, 0, 56], [2, 0, 57], [2, 0, 58], [2, 0, 59], [2, 0, 60], [2, 0, 61], [2, 0, 62], [2, 0, 63], [2, 0, 0], [2, 0, 1]]], [[[1, 1, 20], [1, 1, 21], [1, 1, 22], [1, 1, 23], [1, 1, 24], [1, 1, 25], [1, 1, 26], [1, 1, 27], [1, 1, 28], [1, 1, 29], [1, 1, 30], [1, 1, 31], [1, 1, 32], [1, 1, 33], [1, 1, 34], [1, 1, 35], [1, 1, 36], [1, 1, 37], [1, 1, 38], [1, 1, 39], [1, 1, 40], [1, 1, 41], [1, 1, 42], [1, 1, 43], [1, 1, 44], [1, 1, 45], [1, 1, 46], [1, 1, 47], [1, 1, 48], [1, 1, 49], [1, 1, 50], [1, 1, 51], [1, 1, 52], [1, 1, 53], [1, 1, 54], [1, 1, 55], [1, 1, 56], [1, 1, 57], [1, 1, 58], [1, 1, 59], [1, 1, 60], [1, 1, 61], [1, 1, 62], [1, 1, 63], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 1, 6], [1, 1, 7], [1, 1, 8], [1, 1, 9], [1, 1, 10], [1, 1, 11], [1, 1, 12], [1, 1, 13], [1, 1, 14], [1, 1, 15], [1, 1, 16], [1, 1, 17], [1, 1, 18], [1, 1, 19]], [[4, 1, 44], [4, 1, 45], [4, 1, 46], [4, 1, 47], [4, 1, 48], [4, 1, 49], [4, 1, 50], [4, 1, 51], [4, 1, 52], [4, 1, 53], [4, 1, 54], [4, 1, 55], [4, 1, 56], [4, 1, 57], [4, 1, 58], [4, 1, 59], [4, 1, 60], [4, 1, 61], [4, 1, 62], [4, 1, 63], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 1, 5], [4, 1, 6], [4, 1, 7], [4, 1, 8], [4, 1, 9], [4, 1, 10], [4, 1, 11], [4, 1, 12], [4, 1, 13], [4, 1, 14], [4, 1, 15], [4, 1, 16], [4, 1, 17], [4, 1, 18], [4, 1, 19], [4, 1, 20], [4, 1, 21], [4, 1, 22], [4, 1, 23], [4, 1, 24], [4, 1, 25], [4, 1, 26], [4, 1, 27], [4, 1, 28], [4, 1, 29], [4, 1, 30], [4, 1, 31], [4, 1, 32], [4, 1, 33], [4, 1, 34], [4, 1, 35], [4, 1, 36], [4, 1, 37], [4, 1, 38], [4, 1, 39], [4, 1, 40], [4, 1, 41], [4, 1, 42], [4, 1, 43]], [[2, 1, 58], [2, 1, 59], [2, 1, 60], [2, 1, 61], [2, 1, 62], [2, 1, 63], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [2, 1, 5], [2, 1, 6], [2, 1, 7], [2, 1, 8], [2, 1, 9], [2, 1, 10], [2, 1, 11], [2, 1, 12], [2, 1, 13], [2, 1, 14], [2, 1, 15], [2, 1, 16], [2, 1, 17], [2, 1, 18], [2, 1, 19], [2, 1, 20], [2, 1, 21], [2, 1, 22], [2, 1, 23], [2, 1, 24], [2, 1, 25], [2, 1, 26], [2, 1, 27], [2, 1, 28], [2, 1, 29], [2, 1, 30], [2, 1, 31], [2, 1, 32], [2, 1, 33], [2, 1, 34], [2, 1, 35], [2, 1, 36], [2, 1, 37], [2, 1, 38], [2, 1, 39], [2, 1, 40], [2, 1, 41], [2, 1, 42], [2, 1, 43], [2, 1, 44], [2, 1, 45], [2, 1, 46], [2, 1, 47], [2, 1, 48], [2, 1, 49], [2, 1, 50], [2, 1, 51], [2, 1, 52], [2, 1, 53], [2, 1, 54], [2, 1, 55], [2, 1, 56], [2, 1, 57]], [[0, 1, 28], [0, 1, 29], [0, 1, 30], [0, 1, 31], [0, 1, 32], [0, 1, 33], [0, 1, 34], [0, 1, 35], [0, 1, 36], [0, 1, 37], [0, 1, 38], [0, 1, 39], [0, 1, 40], [0, 1, 41], [0, 1, 42], [0, 1, 43], [0, 1, 44], [0, 1, 45], [0, 1, 46], [0, 1, 47], [0, 1, 48], [0, 1, 49], [0, 1, 50], [0, 1, 51], [0, 1, 52], [0, 1, 53], [0, 1, 54], [0, 1, 55], [0, 1, 56], [0, 1, 57], [0, 1, 58], [0, 1, 59], [0, 1, 60], [0, 1, 61], [0, 1, 62], [0, 1, 63], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 1, 9], [0, 1, 10], [0, 1, 11], [0, 1, 12], [0, 1, 13], [0, 1, 14], [0, 1, 15], [0, 1, 16], [0, 1, 17], [0, 1, 18], [0, 1, 19], [0, 1, 20], [0, 1, 21], [0, 1, 22], [0, 1, 23], [0, 1, 24], [0, 1, 25], [0, 1, 26], [0, 1, 27]], [[3, 1, 9], [3, 1, 10], [3, 1, 11], [3, 1, 12], [3, 1, 13], [3, 1, 14], [3, 1, 15], [3, 1, 16], [3, 1, 17], [3, 1, 18], [3, 1, 19], [3, 1, 20], [3, 1, 21], [3, 1, 22], [3, 1, 23], [3, 1, 24], [3, 1, 25], [3, 1, 26], [3, 1, 27], [3, 1, 28], [3, 1, 29], [3, 1, 30], [3, 1, 31], [3, 1, 32], [3, 1, 33], [3, 1, 34], [3, 1, 35], [3, 1, 36], [3, 1, 37], [3, 1, 38], [3, 1, 39], [3, 1, 40], [3, 1, 41], [3, 1, 42], [3, 1, 43], [3, 1, 44], [3, 1, 45], [3, 1, 46], [3, 1, 47], [3, 1, 48], [3, 1, 49], [3, 1, 50], [3, 1, 51], [3, 1, 52], [3, 1, 53], [3, 1, 54], [3, 1, 55], [3, 1, 56], [3, 1, 57], [3, 1, 58], [3, 1, 59], [3, 1, 60], [3, 1, 61], [3, 1, 62], [3, 1, 63], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 1, 4], [3, 1, 5], [3, 1, 6], [3, 1, 7], [3, 1, 8]]], [[[2, 2, 21], [2, 2, 22], [2, 2, 23], [2, 2, 24], [2, 2, 25], [2, 2, 26], [2, 2, 27], [2, 2, 28], [2, 2, 29], [2, 2, 30], [2, 2, 31], [2, 2, 32], [2, 2, 33], [2, 2, 34], [2, 2, 35], [2, 2, 36], [2, 2, 37], [2, 2, 38], [2, 2, 39], [2, 2, 40], [2, 2, 41], [2, 2, 42], [2, 2, 43], [2, 2, 44], [2, 2, 45], [2, 2, 46], [2, 2, 47], [2, 2, 48], [2, 2, 49], [2, 2, 50], [2, 2, 51], [2, 2, 52], [2, 2, 53], [2, 2, 54], [2, 2, 55], [2, 2, 56], [2, 2, 57], [2, 2, 58], [2, 2, 59], [2, 2, 60], [2, 2, 61], [2, 2, 62], [2, 2, 63], [2, 2, 0], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 2, 5], [2, 2, 6], [2, 2, 7], [2, 2, 8], [2, 2, 9], [2, 2, 10], [2, 2, 11], [2, 2, 12], [2, 2, 13], [2, 2, 14], [2, 2, 15], [2, 2, 16], [2, 2, 17], [2, 2, 18], [2, 2, 19], [2, 2, 20]], [[0, 2, 61], [0, 2, 62], [0, 2, 63], [0, 2, 0], [0, 2, 1], [0, 2, 2], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 2, 9], [0, 2, 10], [0, 2, 11], [0, 2, 12], [0, 2, 13], [0, 2, 14], [0, 2, 15], [0, 2, 16], [0, 2, 17], [0, 2, 18], [0, 2, 19], [0, 2, 20], [0, 2, 21], [0, 2, 22], [0, 2, 23], [0, 2, 24], [0, 2, 25], [0, 2, 26], [0, 2, 27], [0, 2, 28], [0, 2, 29], [0, 2, 30], [0, 2, 31], [0, 2, 32], [0, 2, 33], [0, 2, 34], [0, 2, 35], [0, 2, 36], [0, 2, 37], [0, 2, 38], [0, 2, 39], [0, 2, 40], [0, 2, 41], [0, 2, 42], [0, 2, 43], [0, 2, 44], [0, 2, 45], [0, 2, 46], [0, 2, 47], [0, 2, 48], [0, 2, 49], [0, 2, 50], [0, 2, 51], [0, 2, 52], [0, 2, 53], [0, 2, 54], [0, 2, 55], [0, 2, 56], [0, 2, 57], [0, 2, 58], [0, 2, 59], [0, 2, 60]], [[3, 2, 39], [3, 2, 40], [3, 2, 41], [3, 2, 42], [3, 2, 43], [3, 2, 44], [3, 2, 45], [3, 2, 46], [3, 2, 47], [3, 2, 48], [3, 2, 49], [3, 2, 50], [3, 2, 51], [3, 2, 52], [3, 2, 53], [3, 2, 54], [3, 2, 55], [3, 2, 56], [3, 2, 57], [3, 2, 58], [3, 2, 59], [3, 2, 60], [3, 2, 61], [3, 2, 62], [3, 2, 63], [3, 2, 0], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 2, 4], [3, 2, 5], [3, 2, 6], [3, 2, 7], [3, 2, 8], [3, 2, 9], [3, 2, 10], [3, 2, 11], [3, 2, 12], [3, 2, 13], [3, 2, 14], [3, 2, 15], [3, 2, 16], [3, 2, 17], [3, 2, 18], [3, 2, 19], [3, 2, 20], [3, 2, 21], [3, 2, 22], [3, 2, 23], [3, 2, 24], [3, 2, 25], [3, 2, 26], [3, 2, 27], [3, 2, 28], [3, 2, 29], [3, 2, 30], [3, 2, 31], [3, 2, 32], [3, 2, 33], [3, 2, 34], [3, 2, 35], [3, 2, 36], [3, 2, 37], [3, 2, 38]], [[1, 2, 54], [1, 2, 55], [1, 2, 56], [1, 2, 57], [1, 2, 58], [1, 2, 59], [1, 2, 60], [1, 2, 61], [1, 2, 62], [1, 2, 63], [1, 2, 0], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 2, 9], [1, 2, 10], [1, 2, 11], [1, 2, 12], [1, 2, 13], [1, 2, 14], [1, 2, 15], [1, 2, 16], [1, 2, 17], [1, 2, 18], [1, 2, 19], [1, 2, 20], [1, 2, 21], [1, 2, 22], [1, 2, 23], [1, 2, 24], [1, 2, 25], [1, 2, 26], [1, 2, 27], [1, 2, 28], [1, 2, 29], [1, 2, 30], [1, 2, 31], [1, 2, 32], [1, 2, 33], [1, 2, 34], [1, 2, 35], [1, 2, 36], [1, 2, 37], [1, 2, 38], [1, 2, 39], [1, 2, 40], [1, 2, 41], [1, 2, 42], [1, 2, 43], [1, 2, 44], [1, 2, 45], [1, 2, 46], [1, 2, 47], [1, 2, 48], [1, 2, 49], [1, 2, 50], [1, 2, 51], [1, 2, 52], [1, 2, 53]], [[4, 2, 25], [4, 2, 26], [4, 2, 27], [4, 2, 28], [4, 2, 29], [4, 2, 30], [4, 2, 31], [4, 2, 32], [4, 2, 33], [4, 2, 34], [4, 2, 35], [4, 2, 36], [4, 2, 37], [4, 2, 38], [4, 2, 39], [4, 2, 40], [4, 2, 41], [4, 2, 42], [4, 2, 43], [4, 2, 44], [4, 2, 45], [4, 2, 46], [4, 2, 47], [4, 2, 48], [4, 2, 49], [4, 2, 50], [4, 2, 51], [4, 2, 52], [4, 2, 53], [4, 2, 54], [4, 2, 55], [4, 2, 56], [4, 2, 57], [4, 2, 58], [4, 2, 59], [4, 2, 60], [4, 2, 61], [4, 2, 62], [4, 2, 63], [4, 2, 0], [4, 2, 1], [4, 2, 2], [4, 2, 3], [4, 2, 4], [4, 2, 5], [4, 2, 6], [4, 2, 7], [4, 2, 8], [4, 2, 9], [4, 2, 10], [4, 2, 11], [4, 2, 12], [4, 2, 13], [4, 2, 14], [4, 2, 15], [4, 2, 16], [4, 2, 17], [4, 2, 18], [4, 2, 19], [4, 2, 20], [4, 2, 21], [4, 2, 22], [4, 2, 23], [4, 2, 24]]], [[[3, 3, 43], [3, 3, 44], [3, 3, 45], [3, 3, 46], [3, 3, 47], [3, 3, 48], [3, 3, 49], [3, 3, 50], [3, 3, 51], [3, 3, 52], [3, 3, 53], [3, 3, 54], [3, 3, 55], [3, 3, 56], [3, 3, 57], [3, 3, 58], [3, 3, 59], [3, 3, 60], [3, 3, 61], [3, 3, 62], [3, 3, 63], [3, 3, 0], [3, 3, 1], [3, 3, 2], [3, 3, 3], [3, 3, 4], [3, 3, 5], [3, 3, 6], [3, 3, 7], [3, 3, 8], [3, 3, 9], [3, 3, 10], [3, 3, 11], [3, 3, 12], [3, 3, 13], [3, 3, 14], [3, 3, 15], [3, 3, 16], [3, 3, 17], [3, 3, 18], [3, 3, 19], [3, 3, 20], [3, 3, 21], [3, 3, 22], [3, 3, 23], [3, 3, 24], [3, 3, 25], [3, 3, 26], [3, 3, 27], [3, 3, 28], [3, 3, 29], [3, 3, 30], [3, 3, 31], [3, 3, 32], [3, 3, 33], [3, 3, 34], [3, 3, 35], [3, 3, 36], [3, 3, 37], [3, 3, 38], [3, 3, 39], [3, 3, 40], [3, 3, 41], [3, 3, 42]], [[1, 3, 19], [1, 3, 20], [1, 3, 21], [1, 3, 22], [1, 3, 23], [1, 3, 24], [1, 3, 25], [1, 3, 26], [1, 3, 27], [1, 3, 28], [1, 3, 29], [1, 3, 30], [1, 3, 31], [1, 3, 32], [1, 3, 33], [1, 3, 34], [1, 3, 35], [1, 3, 36], [1, 3, 37], [1, 3, 38], [1, 3, 39], [1, 3, 40], [1, 3, 41], [1, 3, 42], [1, 3, 43], [1, 3, 44], [1, 3, 45], [1, 3, 46], [1, 3, 47], [1, 3, 48], [1, 3, 49], [1, 3, 50], [1, 3, 51], [1, 3, 52], [1, 3, 53], [1, 3, 54], [1, 3, 55], [1, 3, 56], [1, 3, 57], [1, 3, 58], [1, 3, 59], [1, 3, 60], [1, 3, 61], [1, 3, 62], [1, 3, 63], [1, 3, 0], [1, 3, 1], [1, 3, 2], [1, 3, 3], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 3, 9], [1, 3, 10], [1, 3, 11], [1, 3, 12], [1, 3, 13], [1, 3, 14], [1, 3, 15], [1, 3, 16], [1, 3, 17], [1, 3, 18]], [[4, 3, 56], [4, 3, 57], [4, 3, 58], [4, 3, 59], [4, 3, 60], [4, 3, 61], [4, 3, 62], [4, 3, 63], [4, 3, 0], [4, 3, 1], [4, 3, 2], [4, 3, 3], [4, 3, 4], [4, 3, 5], [4, 3, 6], [4, 3, 7], [4, 3, 8], [4, 3, 9], [4, 3, 10], [4, 3, 11], [4, 3, 12], [4, 3, 13], [4, 3, 14], [4, 3, 15], [4, 3, 16], [4, 3, 17], [4, 3, 18], [4, 3, 19], [4, 3, 20], [4, 3, 21], [4, 3, 22], [4, 3, 23], [4, 3, 24], [4, 3, 25], [4, 3, 26], [4, 3, 27], [4, 3, 28], [4, 3, 29], [4, 3, 30], [4, 3, 31], [4, 3, 32], [4, 3, 33], [4, 3, 34], [4, 3, 35], [4, 3, 36], [4, 3, 37], [4, 3, 38], [4, 3, 39], [4, 3, 40], [4, 3, 41], [4, 3, 42], [4, 3, 43], [4, 3, 44], [4, 3, 45], [4, 3, 46], [4, 3, 47], [4, 3, 48], [4, 3, 49], [4, 3, 50], [4, 3, 51], [4, 3, 52], [4, 3, 53], [4, 3, 54], [4, 3, 55]], [[2, 3, 49], [2, 3, 50], [2, 3, 51], [2, 3, 52], [2, 3, 53], [2, 3, 54], [2, 3, 55], [2, 3, 56], [2, 3, 57], [2, 3, 58], [2, 3, 59], [2, 3, 60], [2, 3, 61], [2, 3, 62], [2, 3, 63], [2, 3, 0], [2, 3, 1], [2, 3, 2], [2, 3, 3], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 3, 9], [2, 3, 10], [2, 3, 11], [2, 3, 12], [2, 3, 13], [2, 3, 14], [2, 3, 15], [2, 3, 16], [2, 3, 17], [2, 3, 18], [2, 3, 19], [2, 3, 20], [2, 3, 21], [2, 3, 22], [2, 3, 23], [2, 3, 24], [2, 3, 25], [2, 3, 26], [2, 3, 27], [2, 3, 28], [2, 3, 29], [2, 3, 30], [2, 3, 31], [2, 3, 32], [2, 3, 33], [2, 3, 34], [2, 3, 35], [2, 3, 36], [2, 3, 37], [2, 3, 38], [2, 3, 39], [2, 3, 40], [2, 3, 41], [2, 3, 42], [2, 3, 43], [2, 3, 44], [2, 3, 45], [2, 3, 46], [2, 3, 47], [2, 3, 48]], [[0, 3, 23], [0, 3, 24], [0, 3, 25], [0, 3, 26], [0, 3, 27], [0, 3, 28], [0, 3, 29], [0, 3, 30], [0, 3, 31], [0, 3, 32], [0, 3, 33], [0, 3, 34], [0, 3, 35], [0, 3, 36], [0, 3, 37], [0, 3, 38], [0, 3, 39], [0, 3, 40], [0, 3, 41], [0, 3, 42], [0, 3, 43], [0, 3, 44], [0, 3, 45], [0, 3, 46], [0, 3, 47], [0, 3, 48], [0, 3, 49], [0, 3, 50], [0, 3, 51], [0, 3, 52], [0, 3, 53], [0, 3, 54], [0, 3, 55], [0, 3, 56], [0, 3, 57], [0, 3, 58], [0, 3, 59], [0, 3, 60], [0, 3, 61], [0, 3, 62], [0, 3, 63], [0, 3, 0], [0, 3, 1], [0, 3, 2], [0, 3, 3], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 3, 9], [0, 3, 10], [0, 3, 11], [0, 3, 12], [0, 3, 13], [0, 3, 14], [0, 3, 15], [0, 3, 16], [0, 3, 17], [0, 3, 18], [0, 3, 19], [0, 3, 20], [0, 3, 21], [0, 3, 22]]], [[[4, 4, 50], [4, 4, 51], [4, 4, 52], [4, 4, 53], [4, 4, 54], [4, 4, 55], [4, 4, 56], [4, 4, 57], [4, 4, 58], [4, 4, 59], [4, 4, 60], [4, 4, 61], [4, 4, 62], [4, 4, 63], [4, 4, 0], [4, 4, 1], [4, 4, 2], [4, 4, 3], [4, 4, 4], [4, 4, 5], [4, 4, 6], [4, 4, 7], [4, 4, 8], [4, 4, 9], [4, 4, 10], [4, 4, 11], [4, 4, 12], [4, 4, 13], [4, 4, 14], [4, 4, 15], [4, 4, 16], [4, 4, 17], [4, 4, 18], [4, 4, 19], [4, 4, 20], [4, 4, 21], [4, 4, 22], [4, 4, 23], [4, 4, 24], [4, 4, 25], [4, 4, 26], [4, 4, 27], [4, 4, 28], [4, 4, 29], [4, 4, 30], [4, 4, 31], [4, 4, 32], [4, 4, 33], [4, 4, 34], [4, 4, 35], [4, 4, 36], [4, 4, 37], [4, 4, 38], [4, 4, 39], [4, 4, 40], [4, 4, 41], [4, 4, 42], [4, 4, 43], [4, 4, 44], [4, 4, 45], [4, 4, 46], [4, 4, 47], [4, 4, 48], [4, 4, 49]], [[2, 4, 3], [2, 4, 4], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 4, 9], [2, 4, 10], [2, 4, 11], [2, 4, 12], [2, 4, 13], [2, 4, 14], [2, 4, 15], [2, 4, 16], [2, 4, 17], [2, 4, 18], [2, 4, 19], [2, 4, 20], [2, 4, 21], [2, 4, 22], [2, 4, 23], [2, 4, 24], [2, 4, 25], [2, 4, 26], [2, 4, 27], [2, 4, 28], [2, 4, 29], [2, 4, 30], [2, 4, 31], [2, 4, 32], [2, 4, 33], [2, 4, 34], [2, 4, 35], [2, 4, 36], [2, 4, 37], [2, 4, 38], [2, 4, 39], [2, 4, 40], [2, 4, 41], [2, 4, 42], [2, 4, 43], [2, 4, 44], [2, 4, 45], [2, 4, 46], [2, 4, 47], [2, 4, 48], [2, 4, 49], [2, 4, 50], [2, 4, 51], [2, 4, 52], [2, 4, 53], [2, 4, 54], [2, 4, 55], [2, 4, 56], [2, 4, 57], [2, 4, 58], [2, 4, 59], [2, 4, 60], [2, 4, 61], [2, 4, 62], [2, 4, 63], [2, 4, 0], [2, 4, 1], [2, 4, 2]], [[0, 4, 46], [0, 4, 47], [0, 4, 48], [0, 4, 49], [0, 4, 50], [0, 4, 51], [0, 4, 52], [0, 4, 53], [0, 4, 54], [0, 4, 55], [0, 4, 56], [0, 4, 57], [0, 4, 58], [0, 4, 59], [0, 4, 60], [0, 4, 61], [0, 4, 62], [0, 4, 63], [0, 4, 0], [0, 4, 1], [0, 4, 2], [0, 4, 3], [0, 4, 4], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 4, 8], [0, 4, 9], [0, 4, 10], [0, 4, 11], [0, 4, 12], [0, 4, 13], [0, 4, 14], [0, 4, 15], [0, 4, 16], [0, 4, 17], [0, 4, 18], [0, 4, 19], [0, 4, 20], [0, 4, 21], [0, 4, 22], [0, 4, 23], [0, 4, 24], [0, 4, 25], [0, 4, 26], [0, 4, 27], [0, 4, 28], [0, 4, 29], [0, 4, 30], [0, 4, 31], [0, 4, 32], [0, 4, 33], [0, 4, 34], [0, 4, 35], [0, 4, 36], [0, 4, 37], [0, 4, 38], [0, 4, 39], [0, 4, 40], [0, 4, 41], [0, 4, 42], [0, 4, 43], [0, 4, 44], [0, 4, 45]], [[3, 4, 8], [3, 4, 9], [3, 4, 10], [3, 4, 11], [3, 4, 12], [3, 4, 13], [3, 4, 14], [3, 4, 15], [3, 4, 16], [3, 4, 17], [3, 4, 18], [3, 4, 19], [3, 4, 20], [3, 4, 21], [3, 4, 22], [3, 4, 23], [3, 4, 24], [3, 4, 25], [3, 4, 26], [3, 4, 27], [3, 4, 28], [3, 4, 29], [3, 4, 30], [3, 4, 31], [3, 4, 32], [3, 4, 33], [3, 4, 34], [3, 4, 35], [3, 4, 36], [3, 4, 37], [3, 4, 38], [3, 4, 39], [3, 4, 40], [3, 4, 41], [3, 4, 42], [3, 4, 43], [3, 4, 44], [3, 4, 45], [3, 4, 46], [3, 4, 47], [3, 4, 48], [3, 4, 49], [3, 4, 50], [3, 4, 51], [3, 4, 52], [3, 4, 53], [3, 4, 54], [3, 4, 55], [3, 4, 56], [3, 4, 57], [3, 4, 58], [3, 4, 59], [3, 4, 60], [3, 4, 61], [3, 4, 62], [3, 4, 63], [3, 4, 0], [3, 4, 1], [3, 4, 2], [3, 4, 3], [3, 4, 4], [3, 4, 5], [3, 4, 6], [3, 4, 7]], [[1, 4, 62], [1, 4, 63], [1, 4, 0], [1, 4, 1], [1, 4, 2], [1, 4, 3], [1, 4, 4], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 4, 9], [1, 4, 10], [1, 4, 11], [1, 4, 12], [1, 4, 13], [1, 4, 14], [1, 4, 15], [1, 4, 16], [1, 4, 17], [1, 4, 18], [1, 4, 19], [1, 4, 20], [1, 4, 21], [1, 4, 22], [1, 4, 23], [1, 4, 24], [1, 4, 25], [1, 4, 26], [1, 4, 27], [1, 4, 28], [1, 4, 29], [1, 4, 30], [1, 4, 31], [1, 4, 32], [1, 4, 33], [1, 4, 34], [1, 4, 35], [1, 4, 36], [1, 4, 37], [1, 4, 38], [1, 4, 39], [1, 4, 40], [1, 4, 41], [1, 4, 42], [1, 4, 43], [1, 4, 44], [1, 4, 45], [1, 4, 46], [1, 4, 47], [1, 4, 48], [1, 4, 49], [1, 4, 50], [1, 4, 51], [1, 4, 52], [1, 4, 53], [1, 4, 54], [1, 4, 55], [1, 4, 56], [1, 4, 57], [1, 4, 58], [1, 4, 59], [1, 4, 60], [1, 4, 61]]]]
    return L[x[0]][x[1]][x[2]]


def  print_DOF(result,fr_d,fr_y,fr_c,rounds):
    count=0
    for r in range(rounds-1):
        for z in range(64):
            for x in range(5):
                if data(result,fr_c[r][x][z])==1:
                    count+=1
                if data(result,fr_d[r][x][z])==1:
                    count+=1
                for y in range(5):
                    if data(result,fr_y[r][x][y][z])==1:
                        count+=1
    f=open("R_DOF.txt", "w")
    f.write("red_DOF_consume:"+str(count))
    f.close()
    return 0

def print_condition(result,condition,S):
    f=open("R_conditon.txt","w")
    count=0


    for z in range(64):
        for x in range(4):
            for y in range(5):
                if data(result,condition[x][y][z])==1:
                    if x==0:
                        f.write("$\pi _{\{ " + str(x) + "," + str(y) + "," + str(z) + "\} }^0=1$,\n")
                    elif x==3:
                        f.write("$\pi _{\{ " + str(x+1) + "," + str(y) + "," + str(z) + "\} }^0=1$,\n")
                    else:
                        f.write("$\pi _{\{ " + str(x) + "," + str(y) + "," + str(z) + "\} }^0=0$,\n")
                    count += 1
                    if count==6:
                        f.write("\\\\")
                        count=0

    loc=[]
    for z in range(64):
        for x in range(4):
            for y in range(5):
                if data(result,condition[x][y][z])==1:
                    if x==3:
                        loc.append(L_back([4, y, z]))
                    else:
                        loc.append(L_back([x, y, z]))
    for i in range(len(loc)):
        for j in range(i+1,len(loc)):
            if loc[j][2]<loc[i][2]:

                t=loc[i]
                loc[i]=loc[j]
                loc[j]=t
    



    X0=[[[[0,0,0]for z in range(64)]for y in range(5)]for x in range(5)]
    print(len(X0))

    for x in range(5):
        for y in range(2):
            for z in range(64):
                if [data(result,S[L_forward([x, y, z])[0]][L_forward([x, y, z])[1]][L_forward([x, y, z])[2]][0]), data(result,S[L_forward([x, y, z])[0]][L_forward([x, y, z])[1]][L_forward([x, y, z])[2]][1])] == [1, 0]:
                    X0[x][y][z] = [1, 0, 1]
                if [data(result,S[L_forward([x, y, z])[0]][L_forward([x, y, z])[1]][L_forward([x, y, z])[2]][0]), data(result,S[L_forward([x, y, z])[0]][L_forward([x, y, z])[1]][L_forward([x, y, z])[2]][1])] == [0, 1]:
                    X0[x][y][z] = [0, 1, 1]
                if [data(result,S[L_forward([x, y, z])[0]][L_forward([x, y, z])[1]][L_forward([x, y, z])[2]][0]), data(result,S[L_forward([x, y, z])[0]][L_forward([x, y, z])[1]][L_forward([x, y, z])[2]][1])] == [1, 1]:
                    X0[x][y][z] = [1, 1, 1]



    for i in range(4):

        print("A_{\{ " + str(loc[i][0]) + "," + str(loc[i][1]) + "," + str(loc[i][2]) + "\} }^{(0)}", end="")

        if X0[(loc[i][0] - 1) % 5][0][loc[i][2]]!=[1,1,1]:
            print("\oplus \\bm{c_1}", end="")

        if X0[(loc[i][0] - 1) % 5][0][loc[i][2]] == [1, 1, 1]:
            for j in range(2):
                print("\oplus \\bm{A_{\{ " + str((loc[i][0] - 1) % 5) + "," + str(j) + "," + str(loc[i][2]) + "\} }^{(0)}}", end="")

        for j in range(2, 5):
            print("\oplus A_{\{ " + str((loc[i][0] - 1) % 5) + "," + str(j) + "," + str(loc[i][2]) + "\} }^{(0)}", end="")
        if X0[(loc[i][0] + 1) % 5][0][(loc[i][2]-1)%64]!=[1,1,1]:
            print("\oplus \\bm{c_2}", end="")

        if X0[(loc[i][0] + 1) % 5][0][(loc[i][2] - 1) % 64] == [1, 1, 1]:
            for j in range(2):
                print("\oplus \\bm{A_{\{ " + str((loc[i][0]+1)%5) + "," + str(j) + "," + str((loc[i][2]-1)%64) + "\} }^{(0)}}", end="")

        for j in range(2, 5):
            print("\oplus A_{\{ " + str((loc[i][0]+1)%5) + "," + str(j) + "," + str((loc[i][2]-1)%64) + "\} }^{(0)}", end="")
        print("=0\\\\")

    eq=[]
    for i in loc:
        t=[0 for j in range(9*64)]

        if X0[(i[0] - 1)%5][0][i[2]]==[1,1,1]:
            if (i[0] - 1) % 5 == 4:
                t[i[2]*9+8]=1
            else:
                t[i[2] * 9 + (i[0] - 1) % 5] = 1
                t[i[2] * 9 + (i[0] - 1) % 5 + 4] = 1
        else:
            t[i[2] * 9 + (i[0] - 1) % 5] = 1


        if X0[(i[0] + 1)%5][0][(i[2] - 1)%64]==[1,1,1]:
            if (i[0] + 1)%5 == 4:
                t[((i[2]-1)%64) * 9 + 8]=1
            else:
                t[((i[2]-1)%64) * 9 + (i[0] + 1)%5] = 1
                t[((i[2]-1)%64) * 9 + (i[0] + 1)%5 + 4] = 1
        else:
            t[((i[2]-1)%64) * 9 + (i[0] + 1)%5] = 1


        if i[1]<2:
            if i[0]<4:
                if i[1]==0:
                    t[i[2] * 9 + i[0]] = 1
                else:
                    t[i[2] * 9 + i[0] + 4] = 1
            else:
                t[i[2] * 9 + 9] = 1
        eq.append(t)

    print("矩阵的rank为：",matrix_rank(eq))

    f=open("R_condition_loc.txt","w")
    for i in loc:
        f.write(str(i)+"\n")
    f.close()

print(L_forward([0,1,4]))

def matrix_rank(matrix):
    return np.linalg.matrix_rank(matrix)


def print_match(result,match1,match2):
    t1=[];t2=[]
    rounds=3
    for z in range(64):
        if result[match1[z]]>0:
            t1.append(z)
            print("&\\textcolor{green}{A_{\{ 3,0,"+str((z -gama[3][0])%64)+"\}}^{(3)}} \oplus \\textcolor{green}{A_{\{ 3,3,"+str((z - gama [3][0])%64)+"\}}^{(3)}} \oplus (A_{\{ 1,1,"+str(z)+"\}}^{(4)} \oplus 1) \cdot \\textcolor{green}{(A_{\{ 0,2,"
                  +str((z -gama[0][2])%64)+"\}}^{(3)}} \oplus \\textcolor{green}{A_{\{ 0,0,"+str((z -gama [0][2])%64)+"\}}^{(3)}})\\\\"
                  +"=&A_{\{ 0,1,"+str(z)+"\}}^{(4)} \oplus \\theta _{\{ 4,4,"+str((z - gama [4][1])%64)+"\}}^{(3)} \oplus (A_{\{ 1,1,"
                                           +str(z)+"\}}^{(4)} \oplus 1) \cdot \\theta _{\{ 0,0,"+str((z - gama [0][2])%64)+"\}}^{(3)}\\\\")
        if result[match2[z]] > 0:
            t2.append(z)
            print("&\\textcolor{green}{A_{\{ 4,1," + str((z - gama[4][1])%64) + "\}}^{(3)}} \oplus \\textcolor{green}{A_{\{ 4,4," + str((z - gama[4][1])%64) + "\}}^{(3)}} \oplus (A_{\{ 2,1," + str(z) + "\}}^{(4)} \oplus 1) \cdot \\textcolor{green}{(A_{\{ 1,3,"
                  + str((z - gama[1][3])%64) + "\}}^{(3)}} \oplus \\textcolor{green}{A_{\{ 1,1," + str(z - gama[1][3]) + "\}}^{(3)}})\\\\"
                  + "=&A_{\{ 1,1," + str(z) + "\}}^{(4)} \oplus \\theta _{\{ 4,4," + str((z - gama[4][1])%64) + "\}}^{(3)} \oplus (A_{\{ 2,1,"
                  + str(z) + "\}}^{(4)} \oplus 1) \cdot \\theta _{\{ 1,1," + str((z - gama[1][3])%64) + "\}}^{(3)}\\\\")
    print("match1_find=", t1)
    print("match2_find=", t2)


def print_start(X):
    f=open("start.txt","w")
    f.write("red：")
    for x in range(4):
            for z in range(32):
                if [X[0][x][2][z][i].X for i in range(3)]==[0,1,1]:
                    f.write("X0"+str([x])+str([2])+str([z])+" ")
    f.write("\nblue：")
    for x in range(4):
            for z in range(32):
                if [X[0][x][2][z][i].X for i in range(3)]==[1,0,1]:
                    f.write(str([x,2,z])+",")

def printresult(result,rounds,S,X,C,D,Y,fr_c,fr_d,fr_y,match1,match2,condition,L1,L3):

    w=11

    start_x=-400+10*w;start_y=400-w*22-w/2

    Y0=[];Z0=[]

    for x in range(5):
        t0=[]
        for y in range(5):
            t1=[]
            for z in range(64):
                t2=[data(result,S[x][y][z][0]),data(result,S[x][y][z][1])]+[1]
                t1.append(t2)
            t0.append(t1)
        Y0.append(t0)

    for x in range(5):
        t0=[]
        for y in range(5):
            t1=[]
            for z in range(64):
                t2=[]
                for i in range(3):
                    t2.append(Y0[L3[x*320+y*64+z][0]][L3[x*320+y*64+z][1]][L3[x*320+y*64+z][2]][i])
                t1.append(t2)
            t0.append(t1)
        Z0.append(t0)

    for p_c in range(8):
        t = turtle.Turtle()
        t.speed(0)
        turtle.tracer(False)
        turtle.screensize(10000,8000, "white")

        for z in range(0 + p_c * 8, 8 + p_c * 8):
            for y in range(5):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + x * w, -y * w + start_y + 22 * w)
                    t.down()
                    t.begin_fill()
                    tt = [Z0[x][y][z][i] for i in range(3)]
                    if tt == [1, 0, 1]:
                        t.fillcolor('blue')
                    if tt == [0, 1, 1]:
                        t.fillcolor('red')
                    if tt == [0, 0, 1]:
                        t.fillcolor('green')
                    if tt == [1, 1, 1]:
                        t.fillcolor('gray')
                    if tt == [0, 0, 0]:
                        t.fillcolor('white')
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                    t.end_fill()


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + x * w, start_y + 16 * w)
                    t.down()
                    tt = [1,1,1]
                    t.begin_fill()
                    if tt == [1, 1, 1]:
                        t.fillcolor('gray')
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                    t.end_fill()

                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + x * w, start_y + 16 * w)
                    t.down()
                    if Z0[x][0][z][0]==0:
                        t.pencolor("yellow")
                        for i in range(4):
                            t.forward(w)
                            t.right(90)
                        t.pencolor("black")
                    elif Z0[x][0][z][1]==0:
                        t.pencolor("blue")
                        for i in range(4):
                            t.forward(w)
                            t.right(90)
                        t.pencolor("black")


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + x * w, start_y + 14 * w)
                    t.down()
                    t.begin_fill()
                    tt = [1,1,1]
                    if tt == [1, 0, 1]:
                        t.fillcolor('blue')
                    if tt == [0, 1, 1]:
                        t.fillcolor('red')
                    if tt == [0, 0, 1]:
                        t.fillcolor('green')
                    if tt == [1, 1, 1]:
                        t.fillcolor('gray')
                    if tt == [0, 0, 0]:
                        t.fillcolor('white')
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                    t.end_fill()
                    t.up()
                    t.forward(w)
                    t.down()


        for z in range(0 + p_c * 8, 8 + p_c * 8):
            for y in range(5):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + x * w, -y * w + start_y + 12 * w)
                    t.down()
                    t.begin_fill()
                    tt = [Z0[x][y][z][i] for i in range(3)]
                    if tt == [1, 0, 1]:
                        t.fillcolor('blue')
                    if tt == [0, 1, 1]:
                        t.fillcolor('red')
                    if tt == [0, 0, 1]:
                        t.fillcolor('green')
                    if tt == [1, 1, 1]:
                        t.fillcolor('gray')
                    if tt == [0, 0, 0]:
                        t.fillcolor('white')
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                    t.end_fill()


        for z in range(0 + p_c * 8, 8 + p_c * 8):
            for y in range(5):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w+x*w, -y * w + start_y +6*w)
                    t.down()
                    t.begin_fill()
                    tt = [Y0[x][y][z][i] for i in range(3)]
                    if tt == [1, 0, 1]:
                        t.fillcolor('blue')
                    if tt == [0, 1, 1]:
                        t.fillcolor('red')
                    if tt == [0, 0, 1]:
                        t.fillcolor('green')
                    if tt == [1, 1, 1]:
                        t.fillcolor('gray')
                    if tt == [0, 0, 0]:
                        t.fillcolor('white')
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                    t.end_fill()


        for z in range(0 + p_c * 8, 8 + p_c * 8):
            for y in range(5):
                for x in range(4):
                    if result[condition[x][y][z]]>0:
                        t.up()
                        if x!=3:
                            t.goto(start_x + (z % 8) * 6 * w + x * w+w/2, -y * w + start_y + 6 * w-w*3/4)
                        else:
                            t.goto(start_x + (z % 8) * 6 * w + x * w + w / 2+w, -y * w + start_y + 6 * w - w * 3 / 4)
                        t.down()
                        if x in [0,3]:
                            t.write("1", move=False, align='center', font=('Times New Roman', 10, 'normal'))
                        else:
                            t.write("0", move=False, align='center', font=('Times New Roman', 10, 'normal'))


        for r in range(rounds + 1):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for y in range(5):
                    for x in range(5):
                        t.up()
                        t.goto(start_x + (z % 8) * 6 * w+x*w, -y * w + start_y - r * 22 * w)
                        t.down()
                        t.begin_fill()
                        tt = data_f(result,X[r][x][y][z])
                        if tt == [1, 0, 1]:
                            t.fillcolor('blue')
                        if tt == [0, 1, 1]:
                            t.fillcolor('red')
                        if tt == [0, 0, 1]:
                            t.fillcolor('green')
                        if tt == [1, 1, 1]:
                            t.fillcolor('gray')
                        if tt == [0, 0, 0]:
                            t.fillcolor('white')
                        for i in range(4):
                            t.forward(w)
                            t.right(90)
                        t.end_fill()


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w+x*w, start_y - 6 * w - r * 22 * w)
                    t.down()
                    tt = [data(result,C[r][x][z][0]),f_data1(result,X,r,x,z),data(result,C[r][x][z][1])]
                    t.begin_fill()
                    if tt == [1, 0, 1]:
                        t.fillcolor('blue')
                    if tt == [0, 1, 1]:
                        t.fillcolor('red')
                    if tt == [0, 0, 1]:
                        t.fillcolor('green')
                    if tt == [1, 1, 1]:
                        t.fillcolor('gray')
                    if tt == [0, 0, 0]:
                        t.fillcolor('white')
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                    t.end_fill()


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w+x*w, start_y - 8 * w - r * 22 * w)
                    t.down()
                    t.begin_fill()
                    tt = [data(result,D[r][x][z][0]),f_data2(result,X,r,x,z),data(result,D[r][x][z][1])]
                    if tt == [1, 0, 1]:
                        t.fillcolor('blue')
                    if tt == [0, 1, 1]:
                        t.fillcolor('red')
                    if tt == [0, 0, 1]:
                        t.fillcolor('green')
                    if tt == [1, 1, 1]:
                        t.fillcolor('gray')
                    if tt == [0, 0, 0]:
                        t.fillcolor('white')
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                    t.end_fill()
                    t.up()
                    t.forward(w)
                    t.down()


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for y in range(5):
                    for x in range(5):
                        t.up()
                        t.goto(start_x + (z % 8) * 6 * w+x*w, -y * w + start_y - 10 * w - r * 22 * w)
                        t.down()
                        t.begin_fill()
                        tt = data_f(result,Y[r][x][y][z])
                        if tt == [1, 0, 1]:
                            t.fillcolor('blue')
                        if tt == [0, 1, 1]:
                            t.fillcolor('red')
                        if tt == [0, 0, 1]:
                            t.fillcolor('green')
                        if tt == [1, 1, 1]:
                            t.fillcolor('gray')
                        if tt == [0, 0, 0]:
                            t.fillcolor('white')
                        for i in range(4):
                            t.forward(w)
                            t.right(90)
                        t.end_fill()
                        t.up()
                        t.forward(w)
                        t.down()


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for y in range(5):
                    for x in range(5):
                        t.up()
                        t.goto(start_x + (z % 8) * 6 * w+x*w, -y * w + start_y - 16 * w - r * 22 * w)
                        t.down()

                        t.begin_fill()
                        tt = data_f(result,Y[r][L1[x*320+64*y+z][0]][L1[x*320+64*y+z][1]][L1[x*320+64*y+z][2]])
                        if tt == [1, 0, 1]:
                            t.fillcolor('blue')
                        if tt == [0, 1, 1]:
                            t.fillcolor('red')
                        if tt == [0, 0, 1]:
                            t.fillcolor('green')
                        if tt == [1, 1, 1]:
                            t.fillcolor('gray')
                        if tt == [0, 0, 0]:
                            t.fillcolor('white')
                        for i in range(4):
                            t.forward(w)
                            t.right(90)
                        t.end_fill()


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                for x in range(5):
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + x * w, start_y - 6 * w - r * 22 * w)
                    t.down()
                    if result[fr_c[r][x][z]]>0:
                        t.pencolor("yellow")
                        for i in range(4):
                            t.forward(w)
                            t.right(90)
                        t.pencolor("black")

                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + x * w, start_y - 8 * w - r * 22 * w)
                    t.down()
                    if result[fr_d[r][x][z]]>0:
                        t.pencolor("yellow")
                        for i in range(4):
                            t.forward(w)
                            t.right(90)
                        t.pencolor("black")

                    for y in range(5):
                        t.up()
                        t.goto(start_x + (z % 8) * 6 * w+x*w, -y * w + start_y - 10 * w - r * 22 * w)
                        t.down()
                        if result[fr_y[r][x][y][z]] > 0:
                            t.pencolor("yellow")
                            for i in range(4):
                                t.forward(w)
                                t.right(90)
                            t.pencolor("black")


        for r in range(rounds):
            for z in range(0 + p_c * 8, 8 + p_c * 8):
                if result[match1[(z+gama[3][0])%64]]>0:
                    t.pencolor("cyan")
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + 3 * w, start_y - rounds * 22 * w)
                    t.down()
                    for i in range(4):
                        t.forward(w)
                        t.right(90)
                if result[match2[(z + gama[4][1])%64]] >0 :
                    t.pencolor("cyan")
                    t.up()
                    t.goto(start_x + (z % 8) * 6 * w + 4 * w,-w+start_y - rounds * 22 * w)
                    t.down()
                    for i in range(4):
                        t.forward(w)
                        t.right(90)

        ts = turtle.getscreen()

        ts.getcanvas().postscript(file="work_z" + str(p_c*8)+"-z" +str(p_c*8+7) + ".eps")

        EpsImagePlugin.gs_windows_binary = r'E:\tool\gs\gs10.01.1\bin\gswin32c.exe'

        with open("work_z" + str(p_c*8)+"-z" +str(p_c*8+7)+".eps", 'rb') as file:
            img = Image.open(file)
            img.save("p_z" + str(p_c*8)+"-z" +str(p_c*8+7)+ '.png')

def multiply(a, b):
    return a * b

def data_transform(result,Y):
    X=[result[i]for i in Y]
    a=[]
    for i in X:
        if i>0:
            a.append(1)
        else:
            a.append(0)
    return a


def f_data1(result,X,r,x,z):
    for y in range(5):
        if result[X[r][x][y][z][1]]<0:
            return 0
    return 1

def f_data2(result,X,r,x,z):
    for y in range(5):
        if result[X[r][(x-1)%5][y][z][1]]<0:
            return 0
        if result[X[r][(x+1)%5][y][(z-1)%64][1]]<0:
            return 0
    return 1

def data_f(result,Y):
    X=[result[Y[0]],result[Y[1]],result[Y[2]]]
    if X[0]>0 and X[1]<0 and X[2]>0:
        return [1,0,1]
    if X[0]<0 and X[1]>0 and X[2]>0:
        return [0,1,1]
    if X[0]<0 and X[1]<0 and X[2]>0:
        return [0,0,1]
    if X[0]>0 and X[1]>0 and X[2]>0:
        return [1,1,1]
    if X[0]<0 and X[1]<0 and X[2]<0:
        return [0,0,0]

def data(result,Y):
    if result[Y]>0:
        return 1
    if result[Y]<0:
        return 0